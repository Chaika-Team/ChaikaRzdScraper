syntax = "proto3";

package rzd;

import "google/protobuf/timestamp.proto";

option go_package = "internal/transports/grpc/pb;pb";

// Сервис для работы с данными РЖД
service RzdService {
  // Получение маршрутов поездов
  rpc GetTrainRoutes(GetTrainRoutesRequest) returns (GetTrainRoutesResponse);

  // Получение информации о вагонах поезда
  rpc GetTrainCarriages(GetTrainCarriagesRequest) returns (GetTrainCarriagesResponse);

  // Поиск станций по части названия
  rpc SearchStation(SearchStationRequest) returns (SearchStationResponse);
}

// Запрос для получения маршрутов
message GetTrainRoutesRequest {
  int32 fromCode = 1;         // Код станции отправления
  int32 toCode = 2;           // Код станции прибытия
  int32 direction = 3;        // 0 – OneWay, 1 – Return
  int32 trainType = 4;        // 1 – AllTrains, 2 – Trains, 3 – Electrics
  bool checkSeats = 5;        // Проверять наличие мест
  google.protobuf.Timestamp fromDate = 6;        // Дата отправления в формате "DD.MM.YYYY"
  bool withChange = 7;        // Флаг пересадок
}

// Ответ с маршрутами
message GetTrainRoutesResponse {
  repeated TrainRoute routes = 1;
}

// Модель маршрута
message TrainRoute {
  string trainNumber = 1;
  int32 trainType = 2;
  google.protobuf.Timestamp departure = 3;
  google.protobuf.Timestamp arrival = 4;
  Station from = 5;
  Station to = 6;
  repeated CarriageType carTypes = 7;
}

// Станция
message Station {
  string name = 1;
  int32 code = 2;
  string routeName = 3;
  int32 level = 4;     // (0-5)
  int32 score = 5;     // (0-5)
}

// Тип вагона (агрегированные данные)
message CarriageType {
  int32 type = 1;             // Тип места (например, 1 для Platz, 2 для Coupe и пр.)
  string typeShortLabel = 2;  // Краткое наименование
  string typeLabel = 3;       // Полное наименование
  string class = 4;           // Класс вагона (например, "2Ш")
  int32 tariff = 5;           // Стоимость билета
  int32 tariffExtra = 6;      // Дополнительный тариф
  int32 freeSeats = 7;        // Свободных мест
  bool disabled = 8;          // Специальные места для инвалидов
}

// Запрос для получения информации о вагонах
message GetTrainCarriagesRequest {
  string trainNumber = 1;
  int32 direction = 2;
  int32 fromCode = 3;
  google.protobuf.Timestamp fromTime = 4;
  int32 toCode = 6;
}

// Ответ с информацией о вагонах
message GetTrainCarriagesResponse {
  repeated Car carriages = 1;
}

// Модель вагона (детальная информация)
message Car {
  string carNumber = 1;
  string type = 2;               // Тип вагона (например, "Купе", "Плац", "Люкс")
  string categoryLabelLocal = 3; // Категория вагона (например, "Купе")
  string typeLabel = 4;          // Полное наименование типа
  string categoryCode = 5;       // Код категории
  int32 carTypeId = 6;           // Идентификатор категории
  int32 carType = 7;             // Тип вагона (код)
  string letter = 8;             // Буква вагона
  string classType = 9;          // Тип класса (например, "2Ш")
  int32 tariff = 10;
  int32 tariffExtra = 11;
  Carrier carrier = 12;
  int32 carNumeration = 13;      // 0 - Head, 1 - Tail, 2 - Unknown
  repeated Service services = 14;
  // Пропущены поля мест – они могут быть добавлены позже
}

// Модель услуги
message Service {
  string id = 1;
  string name = 2;
  string description = 3;
}

// Перевозчик
message Carrier {
  string id = 1;
  string name = 2;
}

// Запрос для поиска станций
message SearchStationRequest {
  string query = 1;
  bool compactMode = 2;
  string lang = 3;
}

// Ответ для поиска станций
message SearchStationResponse {
  repeated Station stations = 1;
}
