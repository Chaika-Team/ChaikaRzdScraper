// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v4.25.6
// source: proto/rzd/rzd_service.proto

package pb

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Запрос для получения маршрутов
type GetTrainRoutesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FromCode      int32                  `protobuf:"varint,1,opt,name=fromCode,proto3" json:"fromCode,omitempty"`     // Код станции отправления
	ToCode        int32                  `protobuf:"varint,2,opt,name=toCode,proto3" json:"toCode,omitempty"`         // Код станции прибытия
	Direction     int32                  `protobuf:"varint,3,opt,name=direction,proto3" json:"direction,omitempty"`   // 0 – OneWay, 1 – Return
	TrainType     int32                  `protobuf:"varint,4,opt,name=trainType,proto3" json:"trainType,omitempty"`   // 1 – AllTrains, 2 – Trains, 3 – Electrics
	CheckSeats    bool                   `protobuf:"varint,5,opt,name=checkSeats,proto3" json:"checkSeats,omitempty"` // Проверять наличие мест
	FromDate      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=fromDate,proto3" json:"fromDate,omitempty"`      // Дата отправления в формате "DD.MM.YYYY"
	WithChange    bool                   `protobuf:"varint,7,opt,name=withChange,proto3" json:"withChange,omitempty"` // Флаг пересадок
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTrainRoutesRequest) Reset() {
	*x = GetTrainRoutesRequest{}
	mi := &file_proto_rzd_rzd_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTrainRoutesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTrainRoutesRequest) ProtoMessage() {}

func (x *GetTrainRoutesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rzd_rzd_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTrainRoutesRequest.ProtoReflect.Descriptor instead.
func (*GetTrainRoutesRequest) Descriptor() ([]byte, []int) {
	return file_proto_rzd_rzd_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetTrainRoutesRequest) GetFromCode() int32 {
	if x != nil {
		return x.FromCode
	}
	return 0
}

func (x *GetTrainRoutesRequest) GetToCode() int32 {
	if x != nil {
		return x.ToCode
	}
	return 0
}

func (x *GetTrainRoutesRequest) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *GetTrainRoutesRequest) GetTrainType() int32 {
	if x != nil {
		return x.TrainType
	}
	return 0
}

func (x *GetTrainRoutesRequest) GetCheckSeats() bool {
	if x != nil {
		return x.CheckSeats
	}
	return false
}

func (x *GetTrainRoutesRequest) GetFromDate() *timestamppb.Timestamp {
	if x != nil {
		return x.FromDate
	}
	return nil
}

func (x *GetTrainRoutesRequest) GetWithChange() bool {
	if x != nil {
		return x.WithChange
	}
	return false
}

// Ответ с маршрутами
type GetTrainRoutesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Routes        []*TrainRoute          `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTrainRoutesResponse) Reset() {
	*x = GetTrainRoutesResponse{}
	mi := &file_proto_rzd_rzd_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTrainRoutesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTrainRoutesResponse) ProtoMessage() {}

func (x *GetTrainRoutesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rzd_rzd_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTrainRoutesResponse.ProtoReflect.Descriptor instead.
func (*GetTrainRoutesResponse) Descriptor() ([]byte, []int) {
	return file_proto_rzd_rzd_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetTrainRoutesResponse) GetRoutes() []*TrainRoute {
	if x != nil {
		return x.Routes
	}
	return nil
}

// Модель маршрута
type TrainRoute struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TrainNumber   string                 `protobuf:"bytes,1,opt,name=trainNumber,proto3" json:"trainNumber,omitempty"`
	TrainType     int32                  `protobuf:"varint,2,opt,name=trainType,proto3" json:"trainType,omitempty"`
	Departure     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=departure,proto3" json:"departure,omitempty"`
	Arrival       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=arrival,proto3" json:"arrival,omitempty"`
	From          *Station               `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	To            *Station               `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty"`
	CarTypes      []*CarriageType        `protobuf:"bytes,7,rep,name=carTypes,proto3" json:"carTypes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrainRoute) Reset() {
	*x = TrainRoute{}
	mi := &file_proto_rzd_rzd_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrainRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainRoute) ProtoMessage() {}

func (x *TrainRoute) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rzd_rzd_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainRoute.ProtoReflect.Descriptor instead.
func (*TrainRoute) Descriptor() ([]byte, []int) {
	return file_proto_rzd_rzd_service_proto_rawDescGZIP(), []int{2}
}

func (x *TrainRoute) GetTrainNumber() string {
	if x != nil {
		return x.TrainNumber
	}
	return ""
}

func (x *TrainRoute) GetTrainType() int32 {
	if x != nil {
		return x.TrainType
	}
	return 0
}

func (x *TrainRoute) GetDeparture() *timestamppb.Timestamp {
	if x != nil {
		return x.Departure
	}
	return nil
}

func (x *TrainRoute) GetArrival() *timestamppb.Timestamp {
	if x != nil {
		return x.Arrival
	}
	return nil
}

func (x *TrainRoute) GetFrom() *Station {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *TrainRoute) GetTo() *Station {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *TrainRoute) GetCarTypes() []*CarriageType {
	if x != nil {
		return x.CarTypes
	}
	return nil
}

// Станция
type Station struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code          int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	RouteName     string                 `protobuf:"bytes,3,opt,name=routeName,proto3" json:"routeName,omitempty"`
	Level         int32                  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"` // (0-5)
	Score         int32                  `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"` // (0-5)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Station) Reset() {
	*x = Station{}
	mi := &file_proto_rzd_rzd_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Station) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Station) ProtoMessage() {}

func (x *Station) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rzd_rzd_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Station.ProtoReflect.Descriptor instead.
func (*Station) Descriptor() ([]byte, []int) {
	return file_proto_rzd_rzd_service_proto_rawDescGZIP(), []int{3}
}

func (x *Station) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Station) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Station) GetRouteName() string {
	if x != nil {
		return x.RouteName
	}
	return ""
}

func (x *Station) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Station) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

// Тип вагона (агрегированные данные)
type CarriageType struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Type           int32                  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                    // Тип места (например, 1 для Platz, 2 для Coupe и пр.)
	TypeShortLabel string                 `protobuf:"bytes,2,opt,name=typeShortLabel,proto3" json:"typeShortLabel,omitempty"` // Краткое наименование
	TypeLabel      string                 `protobuf:"bytes,3,opt,name=typeLabel,proto3" json:"typeLabel,omitempty"`           // Полное наименование
	Class          string                 `protobuf:"bytes,4,opt,name=class,proto3" json:"class,omitempty"`                   // Класс вагона (например, "2Ш")
	Tariff         int32                  `protobuf:"varint,5,opt,name=tariff,proto3" json:"tariff,omitempty"`                // Стоимость билета
	TariffExtra    int32                  `protobuf:"varint,6,opt,name=tariffExtra,proto3" json:"tariffExtra,omitempty"`      // Дополнительный тариф
	FreeSeats      int32                  `protobuf:"varint,7,opt,name=freeSeats,proto3" json:"freeSeats,omitempty"`          // Свободных мест
	Disabled       bool                   `protobuf:"varint,8,opt,name=disabled,proto3" json:"disabled,omitempty"`            // Специальные места для инвалидов
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CarriageType) Reset() {
	*x = CarriageType{}
	mi := &file_proto_rzd_rzd_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CarriageType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarriageType) ProtoMessage() {}

func (x *CarriageType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rzd_rzd_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarriageType.ProtoReflect.Descriptor instead.
func (*CarriageType) Descriptor() ([]byte, []int) {
	return file_proto_rzd_rzd_service_proto_rawDescGZIP(), []int{4}
}

func (x *CarriageType) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CarriageType) GetTypeShortLabel() string {
	if x != nil {
		return x.TypeShortLabel
	}
	return ""
}

func (x *CarriageType) GetTypeLabel() string {
	if x != nil {
		return x.TypeLabel
	}
	return ""
}

func (x *CarriageType) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *CarriageType) GetTariff() int32 {
	if x != nil {
		return x.Tariff
	}
	return 0
}

func (x *CarriageType) GetTariffExtra() int32 {
	if x != nil {
		return x.TariffExtra
	}
	return 0
}

func (x *CarriageType) GetFreeSeats() int32 {
	if x != nil {
		return x.FreeSeats
	}
	return 0
}

func (x *CarriageType) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

// Запрос для получения информации о вагонах
type GetTrainCarriagesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TrainNumber   string                 `protobuf:"bytes,1,opt,name=trainNumber,proto3" json:"trainNumber,omitempty"`
	Direction     int32                  `protobuf:"varint,2,opt,name=direction,proto3" json:"direction,omitempty"`
	FromCode      int32                  `protobuf:"varint,3,opt,name=fromCode,proto3" json:"fromCode,omitempty"`
	FromTime      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=fromTime,proto3" json:"fromTime,omitempty"`
	ToCode        int32                  `protobuf:"varint,6,opt,name=toCode,proto3" json:"toCode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTrainCarriagesRequest) Reset() {
	*x = GetTrainCarriagesRequest{}
	mi := &file_proto_rzd_rzd_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTrainCarriagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTrainCarriagesRequest) ProtoMessage() {}

func (x *GetTrainCarriagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rzd_rzd_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTrainCarriagesRequest.ProtoReflect.Descriptor instead.
func (*GetTrainCarriagesRequest) Descriptor() ([]byte, []int) {
	return file_proto_rzd_rzd_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetTrainCarriagesRequest) GetTrainNumber() string {
	if x != nil {
		return x.TrainNumber
	}
	return ""
}

func (x *GetTrainCarriagesRequest) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *GetTrainCarriagesRequest) GetFromCode() int32 {
	if x != nil {
		return x.FromCode
	}
	return 0
}

func (x *GetTrainCarriagesRequest) GetFromTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FromTime
	}
	return nil
}

func (x *GetTrainCarriagesRequest) GetToCode() int32 {
	if x != nil {
		return x.ToCode
	}
	return 0
}

// Ответ с информацией о вагонах
type GetTrainCarriagesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Carriages     []*Car                 `protobuf:"bytes,1,rep,name=carriages,proto3" json:"carriages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTrainCarriagesResponse) Reset() {
	*x = GetTrainCarriagesResponse{}
	mi := &file_proto_rzd_rzd_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTrainCarriagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTrainCarriagesResponse) ProtoMessage() {}

func (x *GetTrainCarriagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rzd_rzd_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTrainCarriagesResponse.ProtoReflect.Descriptor instead.
func (*GetTrainCarriagesResponse) Descriptor() ([]byte, []int) {
	return file_proto_rzd_rzd_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetTrainCarriagesResponse) GetCarriages() []*Car {
	if x != nil {
		return x.Carriages
	}
	return nil
}

// Модель вагона (детальная информация)
type Car struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	CarNumber          string                 `protobuf:"bytes,1,opt,name=carNumber,proto3" json:"carNumber,omitempty"`
	Type               string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`                             // Тип вагона (например, "Купе", "Плац", "Люкс")
	CategoryLabelLocal string                 `protobuf:"bytes,3,opt,name=categoryLabelLocal,proto3" json:"categoryLabelLocal,omitempty"` // Категория вагона (например, "Купе")
	TypeLabel          string                 `protobuf:"bytes,4,opt,name=typeLabel,proto3" json:"typeLabel,omitempty"`                   // Полное наименование типа
	CategoryCode       string                 `protobuf:"bytes,5,opt,name=categoryCode,proto3" json:"categoryCode,omitempty"`             // Код категории
	CarTypeId          int32                  `protobuf:"varint,6,opt,name=carTypeId,proto3" json:"carTypeId,omitempty"`                  // Идентификатор категории
	CarType            int32                  `protobuf:"varint,7,opt,name=carType,proto3" json:"carType,omitempty"`                      // Тип вагона (код)
	Letter             string                 `protobuf:"bytes,8,opt,name=letter,proto3" json:"letter,omitempty"`                         // Буква вагона
	ClassType          string                 `protobuf:"bytes,9,opt,name=classType,proto3" json:"classType,omitempty"`                   // Тип класса (например, "2Ш")
	Tariff             int32                  `protobuf:"varint,10,opt,name=tariff,proto3" json:"tariff,omitempty"`
	TariffExtra        int32                  `protobuf:"varint,11,opt,name=tariffExtra,proto3" json:"tariffExtra,omitempty"`
	Carrier            *Carrier               `protobuf:"bytes,12,opt,name=carrier,proto3" json:"carrier,omitempty"`
	CarNumeration      int32                  `protobuf:"varint,13,opt,name=carNumeration,proto3" json:"carNumeration,omitempty"` // 0 - Head, 1 - Tail, 2 - Unknown
	Services           []*Service             `protobuf:"bytes,14,rep,name=services,proto3" json:"services,omitempty"`            // Пропущены поля мест – они могут быть добавлены позже
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Car) Reset() {
	*x = Car{}
	mi := &file_proto_rzd_rzd_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Car) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Car) ProtoMessage() {}

func (x *Car) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rzd_rzd_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Car.ProtoReflect.Descriptor instead.
func (*Car) Descriptor() ([]byte, []int) {
	return file_proto_rzd_rzd_service_proto_rawDescGZIP(), []int{7}
}

func (x *Car) GetCarNumber() string {
	if x != nil {
		return x.CarNumber
	}
	return ""
}

func (x *Car) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Car) GetCategoryLabelLocal() string {
	if x != nil {
		return x.CategoryLabelLocal
	}
	return ""
}

func (x *Car) GetTypeLabel() string {
	if x != nil {
		return x.TypeLabel
	}
	return ""
}

func (x *Car) GetCategoryCode() string {
	if x != nil {
		return x.CategoryCode
	}
	return ""
}

func (x *Car) GetCarTypeId() int32 {
	if x != nil {
		return x.CarTypeId
	}
	return 0
}

func (x *Car) GetCarType() int32 {
	if x != nil {
		return x.CarType
	}
	return 0
}

func (x *Car) GetLetter() string {
	if x != nil {
		return x.Letter
	}
	return ""
}

func (x *Car) GetClassType() string {
	if x != nil {
		return x.ClassType
	}
	return ""
}

func (x *Car) GetTariff() int32 {
	if x != nil {
		return x.Tariff
	}
	return 0
}

func (x *Car) GetTariffExtra() int32 {
	if x != nil {
		return x.TariffExtra
	}
	return 0
}

func (x *Car) GetCarrier() *Carrier {
	if x != nil {
		return x.Carrier
	}
	return nil
}

func (x *Car) GetCarNumeration() int32 {
	if x != nil {
		return x.CarNumeration
	}
	return 0
}

func (x *Car) GetServices() []*Service {
	if x != nil {
		return x.Services
	}
	return nil
}

// Модель услуги
type Service struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service) Reset() {
	*x = Service{}
	mi := &file_proto_rzd_rzd_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rzd_rzd_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_proto_rzd_rzd_service_proto_rawDescGZIP(), []int{8}
}

func (x *Service) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Перевозчик
type Carrier struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Carrier) Reset() {
	*x = Carrier{}
	mi := &file_proto_rzd_rzd_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Carrier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Carrier) ProtoMessage() {}

func (x *Carrier) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rzd_rzd_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Carrier.ProtoReflect.Descriptor instead.
func (*Carrier) Descriptor() ([]byte, []int) {
	return file_proto_rzd_rzd_service_proto_rawDescGZIP(), []int{9}
}

func (x *Carrier) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Carrier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Запрос для поиска станций
type SearchStationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	CompactMode   bool                   `protobuf:"varint,2,opt,name=compactMode,proto3" json:"compactMode,omitempty"`
	Lang          string                 `protobuf:"bytes,3,opt,name=lang,proto3" json:"lang,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchStationRequest) Reset() {
	*x = SearchStationRequest{}
	mi := &file_proto_rzd_rzd_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchStationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchStationRequest) ProtoMessage() {}

func (x *SearchStationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rzd_rzd_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchStationRequest.ProtoReflect.Descriptor instead.
func (*SearchStationRequest) Descriptor() ([]byte, []int) {
	return file_proto_rzd_rzd_service_proto_rawDescGZIP(), []int{10}
}

func (x *SearchStationRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchStationRequest) GetCompactMode() bool {
	if x != nil {
		return x.CompactMode
	}
	return false
}

func (x *SearchStationRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

// Ответ для поиска станций
type SearchStationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stations      []*Station             `protobuf:"bytes,1,rep,name=stations,proto3" json:"stations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchStationResponse) Reset() {
	*x = SearchStationResponse{}
	mi := &file_proto_rzd_rzd_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchStationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchStationResponse) ProtoMessage() {}

func (x *SearchStationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rzd_rzd_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchStationResponse.ProtoReflect.Descriptor instead.
func (*SearchStationResponse) Descriptor() ([]byte, []int) {
	return file_proto_rzd_rzd_service_proto_rawDescGZIP(), []int{11}
}

func (x *SearchStationResponse) GetStations() []*Station {
	if x != nil {
		return x.Stations
	}
	return nil
}

var File_proto_rzd_rzd_service_proto protoreflect.FileDescriptor

var file_proto_rzd_rzd_service_proto_rawDesc = string([]byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x7a, 0x64, 0x2f, 0x72, 0x7a, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72,
	0x7a, 0x64, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xff, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x61, 0x74, 0x73, 0x12, 0x36, 0x0a,
	0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x72, 0x6f,
	0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x41, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x27, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x72, 0x7a, 0x64, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0xab, 0x02, 0x0a, 0x0a, 0x54, 0x72, 0x61,
	0x69, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x34, 0x0a, 0x07, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x7a, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x1c, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x7a, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x7a, 0x64, 0x2e,
	0x43, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x61,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x7b, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x22, 0xf2, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x79, 0x70, 0x65,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x72, 0x65, 0x65, 0x53, 0x65, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x66, 0x72, 0x65, 0x65, 0x53, 0x65, 0x61, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x36, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x43, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x72,
	0x72, 0x69, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26,
	0x0a, 0x09, 0x63, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x72, 0x7a, 0x64, 0x2e, 0x43, 0x61, 0x72, 0x52, 0x09, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x61, 0x67, 0x65, 0x73, 0x22, 0xc9, 0x03, 0x0a, 0x03, 0x43, 0x61, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x61, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x61, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x63, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x69,
	0x66, 0x66, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74,
	0x61, 0x72, 0x69, 0x66, 0x66, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x26, 0x0a, 0x07, 0x63, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x7a,
	0x64, 0x2e, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x52, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x61, 0x72, 0x4e, 0x75,
	0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x7a, 0x64,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x22, 0x4f, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x2d, 0x0a, 0x07, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x62, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0x41, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x7a, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0xf3, 0x01, 0x0a, 0x0a, 0x52, 0x7a,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x72, 0x7a, 0x64,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x7a, 0x64, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x43,
	0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x72, 0x7a, 0x64, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x7a, 0x64, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x72, 0x7a, 0x64, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x7a, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x20, 0x5a, 0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x62, 0x3b, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_proto_rzd_rzd_service_proto_rawDescOnce sync.Once
	file_proto_rzd_rzd_service_proto_rawDescData []byte
)

func file_proto_rzd_rzd_service_proto_rawDescGZIP() []byte {
	file_proto_rzd_rzd_service_proto_rawDescOnce.Do(func() {
		file_proto_rzd_rzd_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_rzd_rzd_service_proto_rawDesc), len(file_proto_rzd_rzd_service_proto_rawDesc)))
	})
	return file_proto_rzd_rzd_service_proto_rawDescData
}

var file_proto_rzd_rzd_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_proto_rzd_rzd_service_proto_goTypes = []any{
	(*GetTrainRoutesRequest)(nil),     // 0: rzd.GetTrainRoutesRequest
	(*GetTrainRoutesResponse)(nil),    // 1: rzd.GetTrainRoutesResponse
	(*TrainRoute)(nil),                // 2: rzd.TrainRoute
	(*Station)(nil),                   // 3: rzd.Station
	(*CarriageType)(nil),              // 4: rzd.CarriageType
	(*GetTrainCarriagesRequest)(nil),  // 5: rzd.GetTrainCarriagesRequest
	(*GetTrainCarriagesResponse)(nil), // 6: rzd.GetTrainCarriagesResponse
	(*Car)(nil),                       // 7: rzd.Car
	(*Service)(nil),                   // 8: rzd.Service
	(*Carrier)(nil),                   // 9: rzd.Carrier
	(*SearchStationRequest)(nil),      // 10: rzd.SearchStationRequest
	(*SearchStationResponse)(nil),     // 11: rzd.SearchStationResponse
	(*timestamppb.Timestamp)(nil),     // 12: google.protobuf.Timestamp
}
var file_proto_rzd_rzd_service_proto_depIdxs = []int32{
	12, // 0: rzd.GetTrainRoutesRequest.fromDate:type_name -> google.protobuf.Timestamp
	2,  // 1: rzd.GetTrainRoutesResponse.routes:type_name -> rzd.TrainRoute
	12, // 2: rzd.TrainRoute.departure:type_name -> google.protobuf.Timestamp
	12, // 3: rzd.TrainRoute.arrival:type_name -> google.protobuf.Timestamp
	3,  // 4: rzd.TrainRoute.from:type_name -> rzd.Station
	3,  // 5: rzd.TrainRoute.to:type_name -> rzd.Station
	4,  // 6: rzd.TrainRoute.carTypes:type_name -> rzd.CarriageType
	12, // 7: rzd.GetTrainCarriagesRequest.fromTime:type_name -> google.protobuf.Timestamp
	7,  // 8: rzd.GetTrainCarriagesResponse.carriages:type_name -> rzd.Car
	9,  // 9: rzd.Car.carrier:type_name -> rzd.Carrier
	8,  // 10: rzd.Car.services:type_name -> rzd.Service
	3,  // 11: rzd.SearchStationResponse.stations:type_name -> rzd.Station
	0,  // 12: rzd.RzdService.GetTrainRoutes:input_type -> rzd.GetTrainRoutesRequest
	5,  // 13: rzd.RzdService.GetTrainCarriages:input_type -> rzd.GetTrainCarriagesRequest
	10, // 14: rzd.RzdService.SearchStation:input_type -> rzd.SearchStationRequest
	1,  // 15: rzd.RzdService.GetTrainRoutes:output_type -> rzd.GetTrainRoutesResponse
	6,  // 16: rzd.RzdService.GetTrainCarriages:output_type -> rzd.GetTrainCarriagesResponse
	11, // 17: rzd.RzdService.SearchStation:output_type -> rzd.SearchStationResponse
	15, // [15:18] is the sub-list for method output_type
	12, // [12:15] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_proto_rzd_rzd_service_proto_init() }
func file_proto_rzd_rzd_service_proto_init() {
	if File_proto_rzd_rzd_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_rzd_rzd_service_proto_rawDesc), len(file_proto_rzd_rzd_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_rzd_rzd_service_proto_goTypes,
		DependencyIndexes: file_proto_rzd_rzd_service_proto_depIdxs,
		MessageInfos:      file_proto_rzd_rzd_service_proto_msgTypes,
	}.Build()
	File_proto_rzd_rzd_service_proto = out.File
	file_proto_rzd_rzd_service_proto_goTypes = nil
	file_proto_rzd_rzd_service_proto_depIdxs = nil
}
