// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: proto/rzd/rzd_service.proto

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RzdService_GetTrainRoutes_FullMethodName    = "/rzd.RzdService/GetTrainRoutes"
	RzdService_GetTrainCarriages_FullMethodName = "/rzd.RzdService/GetTrainCarriages"
	RzdService_SearchStation_FullMethodName     = "/rzd.RzdService/SearchStation"
)

// RzdServiceClient is the client API for RzdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для работы с данными РЖД
type RzdServiceClient interface {
	// Получение маршрутов поездов
	GetTrainRoutes(ctx context.Context, in *GetTrainRoutesRequest, opts ...grpc.CallOption) (*GetTrainRoutesResponse, error)
	// Получение информации о вагонах поезда
	GetTrainCarriages(ctx context.Context, in *GetTrainCarriagesRequest, opts ...grpc.CallOption) (*GetTrainCarriagesResponse, error)
	// Поиск станций по части названия
	SearchStation(ctx context.Context, in *SearchStationRequest, opts ...grpc.CallOption) (*SearchStationResponse, error)
}

type rzdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRzdServiceClient(cc grpc.ClientConnInterface) RzdServiceClient {
	return &rzdServiceClient{cc}
}

func (c *rzdServiceClient) GetTrainRoutes(ctx context.Context, in *GetTrainRoutesRequest, opts ...grpc.CallOption) (*GetTrainRoutesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrainRoutesResponse)
	err := c.cc.Invoke(ctx, RzdService_GetTrainRoutes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rzdServiceClient) GetTrainCarriages(ctx context.Context, in *GetTrainCarriagesRequest, opts ...grpc.CallOption) (*GetTrainCarriagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrainCarriagesResponse)
	err := c.cc.Invoke(ctx, RzdService_GetTrainCarriages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rzdServiceClient) SearchStation(ctx context.Context, in *SearchStationRequest, opts ...grpc.CallOption) (*SearchStationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchStationResponse)
	err := c.cc.Invoke(ctx, RzdService_SearchStation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RzdServiceServer is the server API for RzdService service.
// All implementations must embed UnimplementedRzdServiceServer
// for forward compatibility.
//
// Сервис для работы с данными РЖД
type RzdServiceServer interface {
	// Получение маршрутов поездов
	GetTrainRoutes(context.Context, *GetTrainRoutesRequest) (*GetTrainRoutesResponse, error)
	// Получение информации о вагонах поезда
	GetTrainCarriages(context.Context, *GetTrainCarriagesRequest) (*GetTrainCarriagesResponse, error)
	// Поиск станций по части названия
	SearchStation(context.Context, *SearchStationRequest) (*SearchStationResponse, error)
	mustEmbedUnimplementedRzdServiceServer()
}

// UnimplementedRzdServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRzdServiceServer struct{}

func (UnimplementedRzdServiceServer) GetTrainRoutes(context.Context, *GetTrainRoutesRequest) (*GetTrainRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainRoutes not implemented")
}
func (UnimplementedRzdServiceServer) GetTrainCarriages(context.Context, *GetTrainCarriagesRequest) (*GetTrainCarriagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainCarriages not implemented")
}
func (UnimplementedRzdServiceServer) SearchStation(context.Context, *SearchStationRequest) (*SearchStationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchStation not implemented")
}
func (UnimplementedRzdServiceServer) mustEmbedUnimplementedRzdServiceServer() {}
func (UnimplementedRzdServiceServer) testEmbeddedByValue()                    {}

// UnsafeRzdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RzdServiceServer will
// result in compilation errors.
type UnsafeRzdServiceServer interface {
	mustEmbedUnimplementedRzdServiceServer()
}

func RegisterRzdServiceServer(s grpc.ServiceRegistrar, srv RzdServiceServer) {
	// If the following call pancis, it indicates UnimplementedRzdServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RzdService_ServiceDesc, srv)
}

func _RzdService_GetTrainRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrainRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RzdServiceServer).GetTrainRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RzdService_GetTrainRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RzdServiceServer).GetTrainRoutes(ctx, req.(*GetTrainRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RzdService_GetTrainCarriages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrainCarriagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RzdServiceServer).GetTrainCarriages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RzdService_GetTrainCarriages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RzdServiceServer).GetTrainCarriages(ctx, req.(*GetTrainCarriagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RzdService_SearchStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchStationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RzdServiceServer).SearchStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RzdService_SearchStation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RzdServiceServer).SearchStation(ctx, req.(*SearchStationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RzdService_ServiceDesc is the grpc.ServiceDesc for RzdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RzdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rzd.RzdService",
	HandlerType: (*RzdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTrainRoutes",
			Handler:    _RzdService_GetTrainRoutes_Handler,
		},
		{
			MethodName: "GetTrainCarriages",
			Handler:    _RzdService_GetTrainCarriages_Handler,
		},
		{
			MethodName: "SearchStation",
			Handler:    _RzdService_SearchStation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rzd/rzd_service.proto",
}
