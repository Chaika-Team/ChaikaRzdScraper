// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: rzd_service.proto

package rzd

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RZDService_GetTrainRoutes_FullMethodName       = "/rzd.RZDService/GetTrainRoutes"
	RZDService_GetTrainRoutesReturn_FullMethodName = "/rzd.RZDService/GetTrainRoutesReturn"
	RZDService_GetTrainCarriages_FullMethodName    = "/rzd.RZDService/GetTrainCarriages"
	RZDService_GetTrainStationList_FullMethodName  = "/rzd.RZDService/GetTrainStationList"
	RZDService_GetStationCode_FullMethodName       = "/rzd.RZDService/GetStationCode"
)

// RZDServiceClient is the client API for RZDService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RZDServiceClient interface {
	GetTrainRoutes(ctx context.Context, in *GetTrainRoutesRequest, opts ...grpc.CallOption) (*GetTrainRoutesResponse, error)
	GetTrainRoutesReturn(ctx context.Context, in *GetTrainRoutesReturnRequest, opts ...grpc.CallOption) (*GetTrainRoutesReturnResponse, error)
	GetTrainCarriages(ctx context.Context, in *GetTrainCarriagesRequest, opts ...grpc.CallOption) (*GetTrainCarriagesResponse, error)
	GetTrainStationList(ctx context.Context, in *GetTrainStationListRequest, opts ...grpc.CallOption) (*GetTrainStationListResponse, error)
	GetStationCode(ctx context.Context, in *GetStationCodeRequest, opts ...grpc.CallOption) (*GetStationCodeResponse, error)
}

type rZDServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRZDServiceClient(cc grpc.ClientConnInterface) RZDServiceClient {
	return &rZDServiceClient{cc}
}

func (c *rZDServiceClient) GetTrainRoutes(ctx context.Context, in *GetTrainRoutesRequest, opts ...grpc.CallOption) (*GetTrainRoutesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrainRoutesResponse)
	err := c.cc.Invoke(ctx, RZDService_GetTrainRoutes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rZDServiceClient) GetTrainRoutesReturn(ctx context.Context, in *GetTrainRoutesReturnRequest, opts ...grpc.CallOption) (*GetTrainRoutesReturnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrainRoutesReturnResponse)
	err := c.cc.Invoke(ctx, RZDService_GetTrainRoutesReturn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rZDServiceClient) GetTrainCarriages(ctx context.Context, in *GetTrainCarriagesRequest, opts ...grpc.CallOption) (*GetTrainCarriagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrainCarriagesResponse)
	err := c.cc.Invoke(ctx, RZDService_GetTrainCarriages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rZDServiceClient) GetTrainStationList(ctx context.Context, in *GetTrainStationListRequest, opts ...grpc.CallOption) (*GetTrainStationListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrainStationListResponse)
	err := c.cc.Invoke(ctx, RZDService_GetTrainStationList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rZDServiceClient) GetStationCode(ctx context.Context, in *GetStationCodeRequest, opts ...grpc.CallOption) (*GetStationCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStationCodeResponse)
	err := c.cc.Invoke(ctx, RZDService_GetStationCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RZDServiceServer is the server API for RZDService service.
// All implementations must embed UnimplementedRZDServiceServer
// for forward compatibility.
type RZDServiceServer interface {
	GetTrainRoutes(context.Context, *GetTrainRoutesRequest) (*GetTrainRoutesResponse, error)
	GetTrainRoutesReturn(context.Context, *GetTrainRoutesReturnRequest) (*GetTrainRoutesReturnResponse, error)
	GetTrainCarriages(context.Context, *GetTrainCarriagesRequest) (*GetTrainCarriagesResponse, error)
	GetTrainStationList(context.Context, *GetTrainStationListRequest) (*GetTrainStationListResponse, error)
	GetStationCode(context.Context, *GetStationCodeRequest) (*GetStationCodeResponse, error)
	mustEmbedUnimplementedRZDServiceServer()
}

// UnimplementedRZDServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRZDServiceServer struct{}

func (UnimplementedRZDServiceServer) GetTrainRoutes(context.Context, *GetTrainRoutesRequest) (*GetTrainRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainRoutes not implemented")
}
func (UnimplementedRZDServiceServer) GetTrainRoutesReturn(context.Context, *GetTrainRoutesReturnRequest) (*GetTrainRoutesReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainRoutesReturn not implemented")
}
func (UnimplementedRZDServiceServer) GetTrainCarriages(context.Context, *GetTrainCarriagesRequest) (*GetTrainCarriagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainCarriages not implemented")
}
func (UnimplementedRZDServiceServer) GetTrainStationList(context.Context, *GetTrainStationListRequest) (*GetTrainStationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainStationList not implemented")
}
func (UnimplementedRZDServiceServer) GetStationCode(context.Context, *GetStationCodeRequest) (*GetStationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStationCode not implemented")
}
func (UnimplementedRZDServiceServer) mustEmbedUnimplementedRZDServiceServer() {}
func (UnimplementedRZDServiceServer) testEmbeddedByValue()                    {}

// UnsafeRZDServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RZDServiceServer will
// result in compilation errors.
type UnsafeRZDServiceServer interface {
	mustEmbedUnimplementedRZDServiceServer()
}

func RegisterRZDServiceServer(s grpc.ServiceRegistrar, srv RZDServiceServer) {
	// If the following call pancis, it indicates UnimplementedRZDServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RZDService_ServiceDesc, srv)
}

func _RZDService_GetTrainRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrainRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RZDServiceServer).GetTrainRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RZDService_GetTrainRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RZDServiceServer).GetTrainRoutes(ctx, req.(*GetTrainRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RZDService_GetTrainRoutesReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrainRoutesReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RZDServiceServer).GetTrainRoutesReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RZDService_GetTrainRoutesReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RZDServiceServer).GetTrainRoutesReturn(ctx, req.(*GetTrainRoutesReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RZDService_GetTrainCarriages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrainCarriagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RZDServiceServer).GetTrainCarriages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RZDService_GetTrainCarriages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RZDServiceServer).GetTrainCarriages(ctx, req.(*GetTrainCarriagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RZDService_GetTrainStationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrainStationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RZDServiceServer).GetTrainStationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RZDService_GetTrainStationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RZDServiceServer).GetTrainStationList(ctx, req.(*GetTrainStationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RZDService_GetStationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RZDServiceServer).GetStationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RZDService_GetStationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RZDServiceServer).GetStationCode(ctx, req.(*GetStationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RZDService_ServiceDesc is the grpc.ServiceDesc for RZDService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RZDService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rzd.RZDService",
	HandlerType: (*RZDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTrainRoutes",
			Handler:    _RZDService_GetTrainRoutes_Handler,
		},
		{
			MethodName: "GetTrainRoutesReturn",
			Handler:    _RZDService_GetTrainRoutesReturn_Handler,
		},
		{
			MethodName: "GetTrainCarriages",
			Handler:    _RZDService_GetTrainCarriages_Handler,
		},
		{
			MethodName: "GetTrainStationList",
			Handler:    _RZDService_GetTrainStationList_Handler,
		},
		{
			MethodName: "GetStationCode",
			Handler:    _RZDService_GetStationCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rzd_service.proto",
}
